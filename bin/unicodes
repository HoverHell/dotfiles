#!/usr/bin/env python3
"""
Print out the standard-python-supplied unicodedata as JSON lines.

Useful for e.g. finding a character by name (using grep).

Not super-fast, pre-dumping the output into a file is recommended.

Expands the categories and similar denotations into names.

Example:

    unicodes | grep --line-buffered return | jq .

    unicodes > unicodes.jsl
    grep return unicodes.jsl | jq .

"""

import sys
import json
import unicodedata

try:
    OUTPUT = sys.stdout.buffer
except AttributeError:  # py2
    OUTPUT = sys.stdout
try:
    num_to_chr = unichr  # py2  # pylint: disable=invalid-name
except NameError:
    num_to_chr = chr  # pylint: disable=invalid-name

# http://www.unicode.org/Public/5.1.0/ucd/UCD.html#General_Category_Values
CATEGORIES = {
    'Lu': ('Letter', 'Uppercase'),
    'Ll': ('Letter', 'Lowercase'),
    'Lt': ('Letter', 'Titlecase'),
    'Lm': ('Letter', 'Modifier'),
    'Lo': ('Letter', 'Other'),
    'Mn': ('Mark', 'Nonspacing'),
    'Mc': ('Mark', 'Spacing Combining'),
    'Me': ('Mark', 'Enclosing'),
    'Nd': ('Number', 'Decimal Digit'),
    'Nl': ('Number', 'Letter'),
    'No': ('Number', 'Other'),
    'Pc': ('Punctuation', 'Connector'),
    'Pd': ('Punctuation', 'Dash'),
    'Ps': ('Punctuation', 'Open'),
    'Pe': ('Punctuation', 'Close'),
    'Pi': ('Punctuation', 'Initial quote (may behave like Ps or Pe depending on usage)'),
    'Pf': ('Punctuation', 'Final quote (may behave like Ps or Pe depending on usage)'),
    'Po': ('Punctuation', 'Other'),
    'Sm': ('Symbol', 'Math'),
    'Sc': ('Symbol', 'Currency'),
    'Sk': ('Symbol', 'Modifier'),
    'So': ('Symbol', 'Other'),
    'Zs': ('Separator', 'Space'),
    'Zl': ('Separator', 'Line'),
    'Zp': ('Separator', 'Paragraph'),
    'Cc': ('Other', 'Control'),
    'Cf': ('Other', 'Format'),
    'Cs': ('Other', 'Surrogate'),
    'Co': ('Other', 'Private Use'),
    'Cn': ('Other', 'Not Assigned (no characters in the file have this property)'),
}
BIDIRECTIONS = {
    'L': 'Left-to-Right',
    'LRE': 'Left-to-Right Embedding',
    'LRO': 'Left-to-Right Override',
    'R': 'Right-to-Left',
    'AL': 'Right-to-Left Arabic',
    'RLE': 'Right-to-Left Embedding',
    'RLO': 'Right-to-Left Override',
    'PDF': 'Pop Directional Format',
    'EN': 'European Number',
    'ES': 'European Number Separator',
    'ET': 'European Number Terminator',
    'AN': 'Arabic Number',
    'CS': 'Common Number Separator',
    'NSM': 'Non-Spacing Mark',
    'BN': 'Boundary Neutral',
    'B': 'Paragraph Separator',
    'S': 'Segment Separator',
    'WS': 'Whitespace',
    # NOTE: Leave out the default 'Other Neutrals'.
    'ON': None,
}
# http://www.unicode.org/reports/tr11/#ED1
# https://www.unicode.org/reports/tr11/images/tr11.h1.jpg
WIDTHS = {
    'F': 'Fullwidth',
    'H': 'Halfwidth',
    'W': 'Wide',
    'Na': 'Narrow',
    'A': 'Ambiguous',
    # NOTE: Leave out te default 'Neutral (Not East Asian)'.
    'N': None,
}

def normalizer(form):
    def maybe_normal_form(char, form=form):
        ''' normalize, but return None if the value was not changed '''
        result = unicodedata.normalize(form, char)
        if result == char:
            return None
        return result
    return maybe_normal_form


DATA_FUNCS = (
    # `lower()` for easier `grep`.
    ('name', lambda char: unicodedata.name(char).lower()),
    ('decimal', unicodedata.decimal),
    ('digit', unicodedata.digit),
    ('numeric', unicodedata.numeric),
    # ('cat', lambda char: CATEGORIES[unicodedata.category(char)]),
    ('cat', lambda char: CATEGORIES[unicodedata.category(char)][0]),
    ('cat_sub', lambda char: CATEGORIES[unicodedata.category(char)][1]),
    ('bidirectional', lambda char: BIDIRECTIONS[unicodedata.bidirectional(char)]),
    ('combining', lambda char: unicodedata.combining(char) or None),
    ('width', lambda char: WIDTHS[unicodedata.east_asian_width(char)]),
    ('mirrored', lambda char: bool(unicodedata.mirrored(char)) or None),  # skip the `false`s too
    ('decomposition', lambda char: unicodedata.decomposition(char) or None),
    ('normal_nfc', normalizer('NFC')),
    ('normal_nfkc', normalizer('NFKC')),
    ('normal_nfd', normalizer('NFD')),
    ('normal_nfkd', normalizer('NFKD')),
)


def charnum_to_data(charnum, data_funcs=DATA_FUNCS):
    data = {}
    try:
        char = num_to_chr(charnum)
    except Exception:
        pass
    else:
        data['char'] = char
        data['number'] = charnum

        for key, func in data_funcs:
            try:
                value = func(char)
            except (KeyError, ValueError):
                pass
            else:
                if value is not None:  # skip nulls for compactness
                    data[key] = value
    return data


def charnum_data_print(data, output=OUTPUT):
    if not data:
        return

    data_line = json.dumps(
        data,
        ensure_ascii=False,  # Make the char itself visible.
        # sort_keys=True,  # consistency, but otherwise python3.7 is more convenient
    )
    data_line_bytes = data_line.encode('utf-8', errors='replace')
    output.write(data_line_bytes)
    output.write(b'\n')


def main():
    for charnum in range(0, 0x10FFFF + 1):
        charnum_data_print(charnum_to_data(charnum))


if __name__ == '__main__':
    main()
